output$distPlot5 <- renderPlotly({
p <- ggplot(dfviolence %>% filter(year %in% yearValues() & country %in% countryValues() )%>% group_by(country,type.of.violence)   %>% summarise(conflicts1 = sum(conflicts)), aes(x=country,y=conflicts1))  +
scale_y_continuous(labels = label_comma())+
geom_col(aes(fill = type.of.violence))+
geom_text(aes(label = conflicts1), size = 1, position = position_stack(vjust = 0.5))
})
output$distPlot4 <- renderPlotly({
fig <- plot_ly(dfviolence %>% filter(year %in% yearValues() & country %in% countryValues()), labels = ~type.of.violence, values = ~death,
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('death :', death),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
fig <- fig %>% add_pie(hole = 0.3)
fig <- fig %>% layout(title = 'Death and type of violence',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
)
# View App
shinyApp(ui, server)
# ======================
# Shiny App with 3 pages
shinyApp(
shinyUI(
navbarPage("Violence around the world",
tabPanel("Introduction", uiOutput('page1')),
tabPanel("World Map", uiOutput('page2')),
tabPanel("Component 3", uiOutput('page3'))
)
),
shinyServer(function(input, output, session) {
#collect variable
# Years
yearValues <- reactive({
years = input$years
first = years[1]
second = years[2]
c(first:second)
})
# country
countryValues <- reactive({
country = input$country
first = country[1]
second = country[2]
three = country[3]
fourth = country[4]
five = country[5]
c(first)
print(country)
})
output$page2 <- renderUI({
sidebarLayout(
sidebarPanel(
# Year Slider
sliderInput("years", "  Years: ",
min = 1989,max = 2022,
value = c(1989,2022),
sep = "",
),
#country or continent selection
multiInput(
inputId = "country",
label = "  Search and select different region:",
choices = unique(distinct_countries$country),
selected = unique(distinct_df$region),
choiceNames = unique(distinct_countries$country),
choiceValues = unique(distinct_countries$country)
)),
mainPanel(
)
)
})
output$page1 <- renderUI({
fluidRow(column(11,
h1("Violence around the world"),
p("This dataset is UCDP's most disaggregated dataset, covering individual
events of organized violence (phenomena of lethal violence occurring at a
given time and place).
")
),
fluidRow(
column(3,
sidebarPanel(width=12,
# Year Slider
sliderInput("years", " Years: ",
min = 1989,max = 2022,
value = c(1989,2022),
sep = "",
),
#country or continent selection
multiInput(
inputId = "country",
label = " Search and select different region:",
choices = unique(distinct_countries$country),
selected = unique(distinct_df$region),
choiceNames = unique(distinct_countries$country),
choiceValues = unique(distinct_countries$country)
)
)
),
column(5,
plotlyOutput('distPlot3')
),
column(4,
plotlyOutput('distPlot5')
)
),
fluidRow(
column(2,
plotlyOutput('distPlot4')
),
column(5,
plotlyOutput('distPlot')
),
column(5,
plotlyOutput('distPlot2')
)
))
})
output$page3 <- renderUI({
sidebarLayout(
selectizeInput(
'id', label = "Year", choices =   NULL,multiple=FALSE,selected="X2015",
options = list(create = TRUE,placeholder = 'Choose the year')
),
## Make a list of checkboxes
radioButtons("radio", label = h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2)),
mainPanel(
)
)
})
output$distPlot <- renderPlotly({
p <- ggplot(dfcountry %>% filter(year %in% yearValues() & country %in% countryValues() ) ) +
aes(x = year, y = death, colour = country) +
geom_line(size = 1) +
scale_x_continuous(labels = label_number()) +
scale_y_continuous(labels = label_comma())+
scale_color_hue(direction = 1) +
labs(x = "Year", y = "Death", title = "Number of Death", color = "Regions")
})
output$distPlot2 <- renderPlotly({
p <- ggplot(dfconfli %>% filter(year %in% yearValues() & country %in% countryValues() ) ) +
aes(x = year, y = conflicts, colour = country) +
scale_x_continuous(labels = label_number()) +
scale_y_continuous(labels = label_comma())+
geom_line(size = 1) +
scale_color_hue(direction = 1) +
labs(x = "Year", y = "conflicts", title = "Number of conflicts", color = "Regions")
})
output$distPlot3 <- renderPlotly({
p <- ggplot(dfviolence %>% filter(year %in% yearValues() & country %in% countryValues() )%>% group_by(country,type.of.violence)   %>% summarise(death1 = sum(death)), aes(x=country,y=death1,fill= type.of.violence)) +
scale_y_continuous(labels = label_comma())+
geom_bar(position="stack",stat="identity")+
geom_text(aes(label = death1), size = 2, position = position_stack(vjust = 0.5))
})
output$distPlot5 <- renderPlotly({
p <- ggplot(dfviolence %>% filter(year %in% yearValues() & country %in% countryValues() )%>% group_by(country,type.of.violence)   %>% summarise(conflicts1 = sum(conflicts)), aes(x=country,y=conflicts1))  +
scale_y_continuous(labels = label_comma())+
geom_col(aes(fill = type.of.violence))+
geom_text(aes(label = conflicts1), size = 2, position = position_stack(vjust = 0.5))
})
output$distPlot4 <- renderPlotly({
fig <- plot_ly(dfviolence %>% filter(year %in% yearValues() & country %in% countryValues()), labels = ~type.of.violence, values = ~death,
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('death :', death),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
fig <- fig %>% add_pie(hole = 0.3)
fig <- fig %>% layout(title = 'Death and type of violence',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
)
# View App
shinyApp(ui, server)
# ======================
# Shiny App with 3 pages
shinyApp(
shinyUI(
navbarPage("Violence around the world",
tabPanel("Introduction", uiOutput('page1')),
tabPanel("World Map", uiOutput('page2')),
tabPanel("Component 3", uiOutput('page3'))
)
),
shinyServer(function(input, output, session) {
#collect variable
# Years
yearValues <- reactive({
years = input$years
first = years[1]
second = years[2]
c(first:second)
})
# country
countryValues <- reactive({
country = input$country
first = country[1]
second = country[2]
three = country[3]
fourth = country[4]
five = country[5]
c(first)
print(country)
})
output$page2 <- renderUI({
sidebarLayout(
sidebarPanel(
# Year Slider
sliderInput("years", "  Years: ",
min = 1989,max = 2022,
value = c(1989,2022),
sep = "",
),
#country or continent selection
multiInput(
inputId = "country",
label = "  Search and select different region:",
choices = unique(distinct_countries$country),
selected = unique(distinct_df$region),
choiceNames = unique(distinct_countries$country),
choiceValues = unique(distinct_countries$country)
)),
mainPanel(
)
)
})
output$page1 <- renderUI({
fluidRow(column(11,
h1("Violence around the world"),
p("This dataset is UCDP's most disaggregated dataset, covering individual
events of organized violence (phenomena of lethal violence occurring at a
given time and place).
")
),
fluidRow(
column(3,
sidebarPanel(width=12,
# Year Slider
sliderInput("years", " Years: ",
min = 1989,max = 2022,
value = c(1989,2022),
sep = "",
),
#country or continent selection
multiInput(
inputId = "country",
label = " Search and select different region:",
choices = unique(distinct_countries$country),
selected = unique(distinct_df$region),
choiceNames = unique(distinct_countries$country),
choiceValues = unique(distinct_countries$country)
)
)
),
column(5,
plotlyOutput('distPlot3')
),
column(4,
plotlyOutput('distPlot5')
)
),
fluidRow(
column(2,
plotlyOutput('distPlot4')
),
column(5,
plotlyOutput('distPlot')
),
column(5,
plotlyOutput('distPlot2')
)
))
})
output$page3 <- renderUI({
sidebarLayout(
selectizeInput(
'id', label = "Year", choices =   NULL,multiple=FALSE,selected="X2015",
options = list(create = TRUE,placeholder = 'Choose the year')
),
## Make a list of checkboxes
radioButtons("radio", label = h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2)),
mainPanel(
)
)
})
output$distPlot <- renderPlotly({
p <- ggplot(dfcountry %>% filter(year %in% yearValues() & country %in% countryValues() ) ) +
aes(x = year, y = death, colour = country) +
geom_line(size = 1) +
scale_x_continuous(labels = label_number()) +
scale_y_continuous(labels = label_comma())+
scale_color_hue(direction = 1) +
labs(x = "Year", y = "Death", title = "Number of Death", color = "Regions")
})
output$distPlot2 <- renderPlotly({
p <- ggplot(dfconfli %>% filter(year %in% yearValues() & country %in% countryValues() ) ) +
aes(x = year, y = conflicts, colour = country) +
scale_x_continuous(labels = label_number()) +
scale_y_continuous(labels = label_comma())+
geom_line(size = 1) +
scale_color_hue(direction = 1) +
labs(x = "Year", y = "conflicts", title = "Number of conflicts", color = "Regions")
})
output$distPlot3 <- renderPlotly({
p <- ggplot(dfviolence %>% filter(year %in% yearValues() & country %in% countryValues() )%>% group_by(country,type.of.violence)   %>% summarise(Death = sum(death)), aes(x=country,y=Death,fill= type.of.violence)) +
scale_y_continuous(labels = label_comma())+
geom_bar(position="stack",stat="identity")+
geom_text(aes(label = Death), size = 2, position = position_stack(vjust = 0.5))
})
output$distPlot5 <- renderPlotly({
p <- ggplot(dfviolence %>% filter(year %in% yearValues() & country %in% countryValues() )%>% group_by(country,type.of.violence)   %>% summarise(Conflicts = sum(conflicts)), aes(x=country,y=Conflicts))  +
scale_y_continuous(labels = label_comma())+
geom_col(aes(fill = type.of.violence))+
geom_text(aes(label = Conflicts), size = 2, position = position_stack(vjust = 0.5))
})
output$distPlot4 <- renderPlotly({
fig <- plot_ly(dfviolence %>% filter(year %in% yearValues() & country %in% countryValues()), labels = ~type.of.violence, values = ~death,
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('death :', death),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
fig <- fig %>% add_pie(hole = 0.3)
fig <- fig %>% layout(title = 'Death and type of violence',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
)
# View App
shinyApp(ui, server)
# ======================
# Shiny App with 3 pages
shinyApp(
shinyUI(
navbarPage("Violence around the world",
tabPanel("Introduction", uiOutput('page1')),
tabPanel("World Map", uiOutput('page2')),
tabPanel("Component 3", uiOutput('page3'))
)
),
shinyServer(function(input, output, session) {
#collect variable
# Years
yearValues <- reactive({
years = input$years
first = years[1]
second = years[2]
c(first:second)
})
# country
countryValues <- reactive({
country = input$country
first = country[1]
second = country[2]
three = country[3]
fourth = country[4]
five = country[5]
c(first)
print(country)
})
output$page2 <- renderUI({
sidebarLayout(
sidebarPanel(
# Year Slider
sliderInput("years", "  Years: ",
min = 1989,max = 2022,
value = c(1989,2022),
sep = "",
),
#country or continent selection
multiInput(
inputId = "country",
label = "  Search and select different region:",
choices = unique(distinct_countries$country),
selected = unique(distinct_df$region),
choiceNames = unique(distinct_countries$country),
choiceValues = unique(distinct_countries$country)
)),
mainPanel(
)
)
})
output$page1 <- renderUI({
fluidRow(column(11,
h1("Violence around the world"),
p("This dataset is UCDP's most disaggregated dataset, covering individual
events of organized violence (phenomena of lethal violence occurring at a
given time and place).
")
),
fluidRow(
column(3,
sidebarPanel(width=12,
# Year Slider
sliderInput("years", " Years: ",
min = 1989,max = 2022,
value = c(1989,2022),
sep = "",
),
#country or continent selection
multiInput(
inputId = "country",
label = " Search and select different region:",
choices = unique(distinct_countries$country),
selected = unique(distinct_df$region),
choiceNames = unique(distinct_countries$country),
choiceValues = unique(distinct_countries$country)
)
)
),
column(5,
plotlyOutput('distPlot3')
),
column(4,
plotlyOutput('distPlot5')
)
),
fluidRow(
column(2,
plotlyOutput('distPlot4')
),
column(5,
plotlyOutput('distPlot')
),
column(5,
plotlyOutput('distPlot2')
)
))
})
output$page3 <- renderUI({
sidebarLayout(
selectizeInput(
'id', label = "Year", choices =   NULL,multiple=FALSE,selected="X2015",
options = list(create = TRUE,placeholder = 'Choose the year')
),
## Make a list of checkboxes
radioButtons("radio", label = h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2)),
mainPanel(
)
)
})
output$distPlot <- renderPlotly({
p <- ggplot(dfcountry %>% filter(year %in% yearValues() & country %in% countryValues() ) ) +
aes(x = year, y = death, colour = country) +
geom_line(size = 1) +
scale_x_continuous(labels = label_number()) +
scale_y_continuous(labels = label_comma())+
scale_color_hue(direction = 1) +
labs(x = "Year", y = "Death", title = "Number of Death", color = "Regions")
})
output$distPlot2 <- renderPlotly({
p <- ggplot(dfconfli %>% filter(year %in% yearValues() & country %in% countryValues() ) ) +
aes(x = year, y = conflicts, colour = country) +
scale_x_continuous(labels = label_number()) +
scale_y_continuous(labels = label_comma())+
geom_line(size = 1) +
scale_color_hue(direction = 1) +
labs(x = "Year", y = "conflicts", title = "Number of conflicts", color = "Regions")
})
output$distPlot3 <- renderPlotly({
p <- ggplot(dfviolence %>% filter(year %in% yearValues() & country %in% countryValues() )%>% group_by(country,type.of.violence)   %>% summarise(Death = sum(death)), aes(x=country,y=Death,fill= type.of.violence)) +
scale_y_continuous(labels = label_comma())+
geom_bar(position="stack",stat="identity")+
geom_text(aes(label = Death), size = 2, position = position_stack(vjust = 0.2))
})
output$distPlot5 <- renderPlotly({
p <- ggplot(dfviolence %>% filter(year %in% yearValues() & country %in% countryValues() )%>% group_by(country,type.of.violence)   %>% summarise(Conflicts = sum(conflicts)), aes(x=country,y=Conflicts))  +
scale_y_continuous(labels = label_comma())+
geom_col(aes(fill = type.of.violence))+
geom_text(aes(label = Conflicts), size = 2, position = position_stack(vjust = 0.2))
})
output$distPlot4 <- renderPlotly({
fig <- plot_ly(dfviolence %>% filter(year %in% yearValues() & country %in% countryValues()), labels = ~type.of.violence, values = ~death,
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('death :', death),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE)
fig <- fig %>% add_pie(hole = 0.3)
fig <- fig %>% layout(title = 'Death and type of violence',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
)
# View App
shinyApp(ui, server)
